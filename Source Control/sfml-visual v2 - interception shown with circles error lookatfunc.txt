#include<iostream>
#include <math.h>
#include<SFML/Window.hpp>
#include <SFML/Graphics.hpp>

float DegreeorRadian(bool degrad, float angle) {
	//Utility tool to convert degree to radian and vise versa
	if (degrad == true) {
		//degree to radian
		angle *= 0.0174533;
	}
	else {
		//radian to degree
		angle /= 0.0174533;
	}
	return angle;
}


sf::Vertex xyFromAngleHypotenuse(float hypotenuse, float angle) {
	sf::Vertex xy;
	angle = DegreeorRadian(true, angle);
	//std::cout << "\n********Here is length and angle" << hypotenuse << " " << angle << std::endl;
	xy.position.x = cosf(angle) * hypotenuse;
	xy.position.y = sinf(angle) * hypotenuse;
	return xy;
}

float AnglePointnMouse(sf::Vertex p1) {
	sf::Vector2i p2 = sf::Mouse::getPosition();
	return atanf((p2.y - p1.position.y) / (p2.x - p1.position.x));
}

class Boundary : public sf::Transformable, public sf::Drawable {
private:
	sf::VertexArray points;
public:
	Boundary() {
		std::cout << "\nHello Boundary";
		points.resize(2);
		this->setOrigin(0, 0);
		points.setPrimitiveType(sf::PrimitiveType::Lines);
		points[0].position = sf::Vector2f(0.0f, 0.0f);
		points[0].color = sf::Color::White;
		points[1].position = sf::Vector2f(200.0f, 0.0f);
		points[1].color = sf::Color::White;

		this->setPosition(300, 100);
		this->setRotation(90);
	}
	sf::VertexArray getPoints() {
		return points;
	}
	virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const {
		states.transform = getTransform();
		target.draw(points, states);
	}
};


class Ray : public sf::Transformable, public sf::Drawable{
private:
	//I need to define 2 points
	//A vertex array
	sf::VertexArray points;
public:
	Ray() {
		points.resize(2);
		points.setPrimitiveType(sf::PrimitiveType::Lines);
		points[0].position = sf::Vector2f(0.0f, 0.0f);
		points[0].color = sf::Color::White;
		points[1].position = sf::Vector2f(40.0f, 0.0f);
		points[1].color = sf::Color::White;
	}
	void Rayparticle(float x1, float x2, float angle) {
		points.resize(2);
		points.setPrimitiveType(sf::PrimitiveType::Lines);
		points[0].position = sf::Vector2f(0.0f, 0.0f);
		points[0].color = sf::Color::White;
		points[1].position = sf::Vector2f(40.0f, 0.0f);
		points[1].color = sf::Color::White;

		this->setPosition(x1, x2);
		this->setRotation(angle);
	}

	bool Checkup(Boundary wall){
		sf::VertexArray wallpoints= wall.getPoints();
		float x1, x2, y1, y2, x3, x4, y3, y4;
		float wallangle = wall.getRotation();
		float wallH;
		wallH = sqrtf(powf(wallpoints[1].position.x - wallpoints[0].position.x, 2) + powf(wallpoints[1].position.y - wallpoints[0].position.y, 2));
		float rayangle = this->getRotation();
		float rayH;
		rayH = sqrtf(powf(this->points[1].position.x - this->points[0].position.x, 2) + powf(this->points[1].position.y - this->points[0].position.y, 2));
		sf::Vertex wall1 = xyFromAngleHypotenuse(wallH, wallangle);
		sf::Vertex ray1 = xyFromAngleHypotenuse(rayH, rayangle);

		x1 = wall.getPosition().x;
		x2 = wall.getPosition().x + wall1.position.x;
		y1 = wall.getPosition().y;
		y2 = wall.getPosition().y + wall1.position.y;
		x3 = this->getPosition().x;
		x4 = this->getPosition().x + ray1.position.x;
		y3 = this->getPosition().y;
		y4 = this->getPosition().y + ray1.position.y;
		
		
		std::cout << "wallpoint a: (" << x1 << ", " << y1 << std::endl;
		std::cout << "wallpoint b: (" << x2 << ", " << y2 << std::endl;
		std::cout << "raypoint a: (" << x3 << ", " << y3 << std::endl;
		std::cout << "raypoint b: (" << x4 << ", " << y4 << std::endl;
		//wallpoints[0].x and y = x1, y1;wallpoints[1] x and y = x2, y2; 
		//points[0] x and y = x3, y3;points[1] x and y = x4, y4;

		//wikipedia.org/wiki/Line%E2%80%93line_intersection
		//we first calculate denominator - its common;
		float denominator = (((x1 - x2)*(y3 - y4)) - ((y1 - y2)*(x3 - x4)));
		std::cout << "\nDENOMINATOR: " << denominator << std::endl;


		if (denominator == 0) {
			points[0].color = (sf::Color::White);
			points[1].color = (sf::Color::White);
			return false;
		}

		float t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denominator;
		float u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denominator;

		if (t > 0 && t < 1 && u>0) {
			std::cout << "\n\nt = " << t << std::endl;
			std::cout << "\n\nu = " << u << std::endl;
			points[0].color = (sf::Color::Red);
			points[1].color = (sf::Color::Red);
			return true;
		}
		else {
			points[0].color = (sf::Color::White);
			points[1].color = (sf::Color::White);
			return false;
		}

	}


	sf::Vector2f* Check(Boundary wall) {
		sf::VertexArray wallpoints = wall.getPoints();
		float x1, x2, y1, y2, x3, x4, y3, y4;
		float wallangle = wall.getRotation();
		float wallH;
		wallH = sqrtf(powf(wallpoints[1].position.x - wallpoints[0].position.x, 2) + powf(wallpoints[1].position.y - wallpoints[0].position.y, 2));
		float rayangle = this->getRotation();
		float rayH;
		rayH = sqrtf(powf(this->points[1].position.x - this->points[0].position.x, 2) + powf(this->points[1].position.y - this->points[0].position.y, 2));
		sf::Vertex wall1 = xyFromAngleHypotenuse(wallH, wallangle);
		sf::Vertex ray1 = xyFromAngleHypotenuse(rayH, rayangle);

		x1 = wall.getPosition().x;
		x2 = wall.getPosition().x + wall1.position.x;
		y1 = wall.getPosition().y;
		y2 = wall.getPosition().y + wall1.position.y;
		x3 = this->getPosition().x;
		x4 = this->getPosition().x + ray1.position.x;
		y3 = this->getPosition().y;
		y4 = this->getPosition().y + ray1.position.y;

		//wikipedia.org/wiki/Line%E2%80%93line_intersection
		//we first calculate denominator - its common;
		float denominator = (((x1 - x2) * (y3 - y4)) - ((y1 - y2) * (x3 - x4)));
		if (denominator == 0) {
			points[0].color = (sf::Color::White);
			points[1].color = (sf::Color::White);
			return NULL;
		}
		float t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denominator;
		float u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denominator;
		if (t > 0 && t < 1 && u>0) {
			points[0].color = (sf::Color::Red);
			points[1].color = (sf::Color::Red);
			sf::Vector2f PoI;
			PoI.x = x1 + (t * (x2 - x1));
			PoI.y = y1 + (t * (y2 - y1));
			return &PoI;
		}
		else {
			points[0].color = (sf::Color::White);
			points[1].color = (sf::Color::White);
			return NULL;
		}
	}
	void lookat(float x2, float y2) {
		//std::cout << "hello";
		float o = y2 - this->getPosition().y;
		float a = x2 - this->getPosition().x;
		float angle = atanf((o / a));
		angle = DegreeorRadian(0, angle);
		this->setRotation(angle);
	}
	virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
	{
		states.transform = getTransform();
		target.draw(points, states);
	}
};

class Particle : public sf::Transformable, public sf::Drawable {
private:
	Ray * rays;
public:
	sf::CircleShape* pois;
	int count;
	Particle() {
		setPosition(200, 200);
		rays = new Ray[36];
		pois = new sf::CircleShape[36];
		count = 0;
		for (int i = 0; i < 360; i += 10) {
			rays[i/10].Rayparticle(this->getPosition().x, this->getPosition().y, i);
		}

	}

	void update(float x, float y) {
		for (int i = 0; i < 36; i++) {
			rays[i].setPosition(x,y);
		}

	}

	void look(Boundary wall) {
		int j = 0;
		for (int i = 0; i < 36; i ++) {
			if (rays[i].Check(wall))
			{
				sf::Vector2f here;
				here = *rays[i].Check(wall);
				std::cout<<"for ray "<<i <<":\n"<<"Here " << here.x << " " << here.y << "\n";
				if (&here) {
						count = j;
						pois[j].setRadius(10);
						pois[j].setOrigin(10, 10);
						pois[j].setPosition(here);
						pois[j].setFillColor(sf::Color::Red);

						j++;
				}
			}
		}
	}

	virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const {
		states.transform = getTransform();
		for (int i = 0; i < 36; i++) {
			rays[i].draw(target, states);
		}
		//target.draw(points, states);
	}
};

int main() {
	sf::RenderWindow window(sf::VideoMode(400, 400), "First Window!", sf::Style::Default);
	window.setVerticalSyncEnabled(true);
	
	sf::CircleShape point(10.0f);
	point.setOrigin(point.getRadius(), point.getRadius());
	point.setOutlineColor(sf::Color::Magenta);
	sf::CircleShape* pointer;

	//sf::Vertex vert;
	
	//Ray ray;
	//ray.setPosition(30.0f, 200.0f);
	Boundary wall;
	Particle particle;



	while (window.isOpen()) {
		sf::Event event;
		while (window.pollEvent(event)) {
			if (event.type == sf::Event::MouseMoved)
			{
				point.setPosition(event.mouseMove.x, event.mouseMove.y);
				particle.update(event.mouseMove.x, event.mouseMove.y);
				//particle.setPosition(event.mouseMove.x, event.mouseMove.y);
				//ray.lookat(event.mouseMove.x, event.mouseMove.y);
			}
			else if (event.type == sf::Event::Closed)
				window.close();
		}
		//particle.look(wall);
		//if (ray.Check(wall) != NULL) {
		//	sf::Vector2f poi = *ray.Check(wall);
		//	point.setPosition(poi);
		// }
		window.clear();
		particle.look(wall);
		window.draw(point);
		window.draw(particle);
		//window.draw(ray);
		window.draw(wall);
		for (int i = 0; i <= particle.count; i++) {
			window.draw(particle.pois[i]);
		}
		window.display();
	}


	return 0;
}